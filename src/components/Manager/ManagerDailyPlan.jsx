import { useEffect, useState } from "react";
import {
  listDailyPlans,
  updateDailyPlan,
  approveAllDailyPlans,
} from "../../lib/apiDailyPlan";

export default function ManagerDailyPlan() {
  const [plans, setPlans] = useState([]);
  const [loading, setLoading] = useState(false);

  const today = new Date().toLocaleDateString("en-CA", {
    timeZone: "Asia/Ho_Chi_Minh",
  });

  // üß© Load k·∫ø ho·∫°ch ch∆∞a duy·ªát
  useEffect(() => {
    (async () => {
      const data = await listDailyPlans();
      setPlans(data.filter((p) => p.planDate === today && !p.status));
    })();
  }, [today]);

  // üß© C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng t·ª´ng m√≥n
  const handleQuantityChange = (planId, value) => {
    setPlans((prev) =>
      prev.map((p) =>
        p.planId === planId ? { ...p, plannedQuantity: Number(value) } : p,
      ),
    );
  };

  const handleUpdateQuantity = async (plan) => {
    try {
      await updateDailyPlan(plan.planId, {
        plannedQuantity: plan.plannedQuantity,
        remainingQuantity: plan.plannedQuantity,
      });
      alert(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng cho "${plan.itemName}"`);
    } catch (err) {
      console.error("‚ùå L·ªói c·∫≠p nh·∫≠t:", err);
      alert("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng!");
    }
  };

  // ‚úÖ Duy·ªát t·∫•t c·∫£
  const handleApproveAll = async () => {
    if (!window.confirm("X√°c nh·∫≠n duy·ªát to√†n b·ªô k·∫ø ho·∫°ch h√¥m nay?")) return;
    setLoading(true);
    try {
      await approveAllDailyPlans(plans);
      alert("‚úÖ ƒê√£ duy·ªát to√†n b·ªô k·∫ø ho·∫°ch!");
      setPlans([]);
    } catch (err) {
      console.error("‚ùå L·ªói duy·ªát t·ªïng:", err);
      alert("Kh√¥ng th·ªÉ duy·ªát to√†n b·ªô!");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="p-6">
      <h2 className="text-xl font-bold mb-4 text-neutral-900">
        Duy·ªát K·∫ø Ho·∫°ch Trong Ng√†y
      </h2>

      {plans.length === 0 ? (
        <p className="text-gray-500 italic">Kh√¥ng c√≥ k·∫ø ho·∫°ch ch·ªù duy·ªát.</p>
      ) : (
        <>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">
            {plans.map((p) => (
              <div
                key={p.planId}
                className="bg-white p-4 rounded-xl shadow border hover:shadow-md transition-all"
              >
                <h4 className="font-semibold mb-1">{p.itemName}</h4>
                <p className="text-sm text-gray-500 mb-2">
                  M√≥n: <span className="font-medium">{p.itemType}</span>
                </p>

                <div className="flex items-center gap-2 mb-3">
                  <input
                    type="number"
                    value={p.plannedQuantity}
                    min="0"
                    onChange={(e) =>
                      handleQuantityChange(p.planId, e.target.value)
                    }
                    className="border rounded-md px-2 py-1 w-20 text-center"
                  />
                  <button
                    onClick={() => handleUpdateQuantity(p)}
                    className="bg-yellow-500 hover:bg-yellow-600 text-white px-3 py-1 rounded text-sm"
                  >
                    L∆∞u
                  </button>
                </div>
              </div>
            ))}
          </div>

          <button
            onClick={handleApproveAll}
            disabled={loading}
            className="w-full py-3 rounded-xl text-white font-semibold text-lg bg-gradient-to-r from-green-500 to-emerald-500 hover:opacity-90 transition-all"
          >
            {loading ? "ƒêang duy·ªát..." : "‚úÖ Duy·ªát to√†n b·ªô k·∫ø ho·∫°ch"}
          </button>
        </>
      )}
    </div>
  );
}
