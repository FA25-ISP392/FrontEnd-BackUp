import apiConfig from "../api/apiConfig";

// üß© Chu·∫©n ho√° d·ªØ li·ªáu topping t·ª´ backend
export function normalizeTopping(t = {}) {
  return {
    id: t.toppingId ?? t.id ?? 0,
    name: t.name ?? "",
    price: Number(t.price ?? 0),
    calories: Number(t.calories ?? 0),
    gram: Number(t.gram ?? 0),
  };
}

// üü¢ L·∫•y danh s√°ch topping
export async function listTopping(params = {}) {
  try {
    const token = localStorage.getItem("token");
    const res = await apiConfig.get("/topping", {
      params,
      headers: {
        // Authorization: `Bearer ${token}`,
      },
    });

    // API tr·∫£ v·ªÅ { code, message, result: [...] }
    const arr = res?.result ?? res ?? [];
    return Array.isArray(arr) ? arr.map(normalizeTopping) : [];
  } catch (err) {
    console.error("‚ùå L·ªói khi load danh s√°ch topping:", err);
    throw err;
  }
}

// üü¢ L·∫•y chi ti·∫øt topping theo ID
export async function getTopping(id) {
  if (!id) throw new Error("Thi·∫øu ID topping");
  try {
    const token = localStorage.getItem("token");
    const res = await apiConfig.get(`/topping/${id}`, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });

    // API tr·∫£ v·ªÅ { code, message, result: { toppingId, name, ... } }
    const data = res?.result ?? res;
    return normalizeTopping(data);
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y topping:", err);
    throw err;
  }
}

// üü¢ T·∫°o topping m·ªõi
export async function createTopping(payload) {
  try {
    const token = localStorage.getItem("token");
    const res = await apiConfig.post(
      "/topping",
      {
        name: payload.name,
        price: Number(payload.price),
        calories: Number(payload.calories),
        gram: Number(payload.gram),
        quantity: Number(payload.quantity ?? 0),
      },
      {
        headers: {
          // Authorization: `Bearer ${token}`,
          // "Content-Type": "application/json",
        },
      },
    );

    const data = res?.result ?? res;
    return normalizeTopping(data);
  } catch (err) {
    console.error("‚ùå L·ªói khi t·∫°o topping:", err);
    throw err;
  }
}

// üü¢ C·∫≠p nh·∫≠t topping
export async function updateTopping(id, payload) {
  if (!id) throw new Error("Thi·∫øu ID topping ƒë·ªÉ c·∫≠p nh·∫≠t");
  try {
    const token = localStorage.getItem("token");
    const res = await apiConfig.put(`/topping/${id}`, payload, {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
    });

    const data = res?.result ?? res;
    return normalizeTopping(data);
  } catch (err) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t topping:", err);
    throw err;
  }
}

// üü¢ Xo√° topping
export async function deleteTopping(id) {
  if (!id) throw new Error("Thi·∫øu ID topping ƒë·ªÉ xo√°");
  try {
    const token = localStorage.getItem("token");
    const res = await apiConfig.delete(`/topping/${id}`, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });

    // API tr·∫£ v·ªÅ { code, message, result: "string" }
    return res?.result ?? "X√≥a th√†nh c√¥ng";
  } catch (err) {
    console.error("‚ùå L·ªói khi xo√° topping:", err);
    throw err;
  }
}
