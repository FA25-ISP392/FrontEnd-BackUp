import { useEffect } from "react";
import { useNavigate } from "react-router-dom";
import {
  saveSession,
  parseJWT,
  getUsernameFromToken, // üëà C·∫ßn thi·∫øt
  getFullNameFromToken, // üëà C·∫ßn thi·∫øt
} from "../lib/auth";
import { ensureCustomerForUser } from "../lib/apiCustomer"; // üëà C·∫ßn thi·∫øt

export default function GoogleCallback() {
  const navigate = useNavigate();

  useEffect(() => {
    const hash = window.location.hash.substring(1);
    const params = new URLSearchParams(hash);
    const token = params.get("token");

    if (token) {
      (async () => {
        try {
          const jwtPayload = parseJWT(token) || {};

          const username = getUsernameFromToken(jwtPayload);
          const fullName = getFullNameFromToken(jwtPayload);
          const email = jwtPayload.email;

          // 1. T·∫°o profile t·∫°m t·ª´ JWT
          const tempProfile = {
            username,
            fullName,
            email,
            role: "CUSTOMER",
            phone: jwtPayload.phone || "",
          };

          // 2. L∆ØU TOKEN T·∫†M TH·ªúI v√†o localStorage ƒë·ªÉ c√°c API call ti·∫øp theo ƒë∆∞·ª£c authorize
          saveSession({ token, user: tempProfile });

          // 3. G·ªåI API ƒê·ªÇ L·∫§Y V√Ä GHI ƒê√à TH√îNG TIN CUSTOMER ƒê·∫¶Y ƒê·ª¶
          const customerData = await ensureCustomerForUser(tempProfile);

          // 4. C·∫≠p nh·∫≠t profile cu·ªëi c√πng v·ªõi th√¥ng tin t·ª´ API
          const finalProfile = {
            ...tempProfile,
            ...customerData, // Ghi ƒë√® c√°c tr∆∞·ªùng chi ti·∫øt (height, weight, portion...)
            fullName: customerData.fullName || tempProfile.fullName,
            customerId: customerData.customerId || customerData.id,
            role: "CUSTOMER",
          };

          // 5. L∆ØU L·∫†I SESSION V·ªöI TH√îNG TIN ƒê·∫¶Y ƒê·ª¶
          saveSession({ token, user: finalProfile });

          window.dispatchEvent(new Event("auth:changed"));
          navigate("/home", { replace: true });
        } catch (e) {
          console.error("L·ªói x·ª≠ l√Ω token/l·∫•y profile:", e);
          // Quay v·ªÅ trang login n·∫øu kh√¥ng th·ªÉ l·∫•y profile
          alert(
            "ƒêƒÉng nh·∫≠p Google th√†nh c√¥ng nh∆∞ng kh√¥ng th·ªÉ t·∫£i th√¥ng tin profile."
          );
          navigate("/home/dangnhap", { replace: true });
        }
      })();
    } else {
      alert("ƒêƒÉng nh·∫≠p Google kh√¥ng th√†nh c√¥ng (thi·∫øu token).");
      navigate("/home/dangnhap", { replace: true });
    }
  }, [navigate]);

  return (
    <div className="min-h-screen flex items-center justify-center">
      ƒêang x·ª≠ l√Ω ƒëƒÉng nh·∫≠p Google...
    </div>
  );
}
